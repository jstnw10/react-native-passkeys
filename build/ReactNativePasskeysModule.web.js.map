{"version":3,"file":"ReactNativePasskeysModule.web.js","sourceRoot":"","sources":["../src/ReactNativePasskeysModule.web.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n\tAuthenticationCredential,\n\tAuthenticationExtensionsClientInputs,\n\tAuthenticationExtensionsClientOutputs,\n\tAuthenticationExtensionsClientOutputsJSON,\n\tAuthenticationResponseJSON,\n\tPublicKeyCredentialCreationOptionsJSON,\n\tPublicKeyCredentialRequestOptionsJSON,\n\tRegistrationCredential,\n\tRegistrationResponseJSON,\n} from \"./ReactNativePasskeys.types\";\nimport { NotSupportedError } from \"./errors\";\nimport { base64URLStringToBuffer, bufferToBase64URLString } from \"./utils/base64\";\n\ninterface CreationReponse extends Omit<RegistrationResponseJSON, \"response\"> {\n\tresponse: RegistrationResponseJSON[\"response\"] & {\n\t\t/**\n\t\t * This operation returns an ArrayBuffer containing the DER SubjectPublicKeyInfo of the new credential, or null if this is not available.\n\t\t * https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-getpublickey\n\t\t */\n\t\tgetPublicKey(): ArrayBuffer | null;\n\t};\n}\n\nexport default {\n\tget name(): string {\n\t\treturn \"ReactNativePasskeys\";\n\t},\n\n\tisAutoFillAvalilable(): Promise<boolean> {\n\t\tconst globalPublicKeyCredential = window.PublicKeyCredential;\n\n\t\tif (globalPublicKeyCredential.isConditionalMediationAvailable === undefined)\n\t\t\treturn new Promise((resolve) => resolve(false));\n\n\t\treturn globalPublicKeyCredential.isConditionalMediationAvailable();\n\t},\n\n\tisSupported() {\n\t\treturn (\n\t\t\twindow?.PublicKeyCredential !== undefined && typeof window.PublicKeyCredential === \"function\"\n\t\t);\n\t},\n\n\tasync create({\n\t\tsignal,\n\t\t...request\n\t}: PublicKeyCredentialCreationOptionsJSON &\n\t\tPick<CredentialCreationOptions, \"signal\">): Promise<CreationReponse | null> {\n\t\tif (!this.isSupported) throw new NotSupportedError();\n\n\t\tconst credential = (await navigator.credentials.create({\n\t\t\tsignal,\n\t\t\tpublicKey: {\n\t\t\t\t...request,\n\t\t\t\tchallenge: base64URLStringToBuffer(request.challenge),\n\t\t\t\tuser: { ...request.user, id: base64URLStringToBuffer(request.user.id) },\n\t\t\t\texcludeCredentials: request.excludeCredentials?.map((credential) => ({\n\t\t\t\t\t...credential,\n\t\t\t\t\tid: base64URLStringToBuffer(credential.id),\n\t\t\t\t\t// TODO: remove the override when typescript has updated webauthn types\n\t\t\t\t\ttransports: (credential.transports ?? undefined) as AuthenticatorTransport[] | undefined,\n\t\t\t\t})),\n\t\t\t},\n\t\t})) as RegistrationCredential;\n\n\t\t// TODO: remove the override when typescript has updated webauthn types\n\t\tconst extensions =\n\t\t\tcredential?.getClientExtensionResults() as AuthenticationExtensionsClientOutputs;\n\t\twarnUserOfMissingWebauthnExtensions(request.extensions, extensions);\n\t\tconst { largeBlob, ...clientExtensionResults } = extensions;\n\n\t\tif (!credential) return null;\n\n\t\treturn {\n\t\t\tid: credential.id,\n\t\t\trawId: credential.id,\n\t\t\tresponse: {\n\t\t\t\tclientDataJSON: bufferToBase64URLString(credential.response.clientDataJSON),\n\t\t\t\tattestationObject: bufferToBase64URLString(credential.response.attestationObject),\n\t\t\t\tgetPublicKey() {\n\t\t\t\t\treturn credential.response.getPublicKey();\n\t\t\t\t},\n\t\t\t},\n\t\t\tauthenticatorAttachment: undefined,\n\t\t\ttype: \"public-key\",\n\t\t\tclientExtensionResults: {\n\t\t\t\t...clientExtensionResults,\n\t\t\t\t...(largeBlob && {\n\t\t\t\t\tlargeBlob: {\n\t\t\t\t\t\t...largeBlob,\n\t\t\t\t\t\tblob: largeBlob?.blob ? bufferToBase64URLString(largeBlob.blob) : undefined,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t} satisfies AuthenticationExtensionsClientOutputsJSON,\n\t\t};\n\t},\n\n\tasync get({\n\t\tmediation,\n\t\tsignal,\n\t\t...request\n\t}: PublicKeyCredentialRequestOptionsJSON &\n\t\tPick<\n\t\t\tCredentialRequestOptions,\n\t\t\t\"mediation\" | \"signal\"\n\t\t>): Promise<AuthenticationResponseJSON | null> {\n\t\tconst credential = (await navigator.credentials.get({\n\t\t\tmediation,\n\t\t\tsignal,\n\t\t\tpublicKey: {\n\t\t\t\t...request,\n\t\t\t\textensions: {\n\t\t\t\t\t...request.extensions,\n\t\t\t\t\t/**\n\t\t\t\t\t * the navigator interface doesn't have a largeBlob property\n\t\t\t\t\t * as it may not be supported by all browsers\n\t\t\t\t\t *\n\t\t\t\t\t * browsers that do not support the extension will just ignore the property so it's safe to include it\n\t\t\t\t\t *\n\t\t\t\t\t * @ts-expect-error:*/\n\t\t\t\t\tlargeBlob: request.extensions?.largeBlob?.write\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t...request.extensions?.largeBlob,\n\t\t\t\t\t\t\t\twrite: base64URLStringToBuffer(request.extensions.largeBlob.write),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: request.extensions?.largeBlob,\n\t\t\t\t},\n\t\t\t\tchallenge: base64URLStringToBuffer(request.challenge),\n\t\t\t\tallowCredentials: request.allowCredentials?.map((credential) => ({\n\t\t\t\t\t...credential,\n\t\t\t\t\tid: base64URLStringToBuffer(credential.id),\n\t\t\t\t\t// TODO: remove the override when typescript has updated webauthn types\n\t\t\t\t\ttransports: (credential.transports ?? undefined) as AuthenticatorTransport[] | undefined,\n\t\t\t\t})),\n\t\t\t},\n\t\t})) as AuthenticationCredential;\n\n\t\t// TODO: remove the override when typescript has updated webauthn types\n\t\tconst extensions =\n\t\t\tcredential?.getClientExtensionResults() as AuthenticationExtensionsClientOutputs;\n\t\twarnUserOfMissingWebauthnExtensions(request.extensions, extensions);\n\t\tconst { largeBlob, ...clientExtensionResults } = extensions;\n\n\t\tif (!credential) return null;\n\n\t\treturn {\n\t\t\tid: credential.id,\n\t\t\trawId: credential.id,\n\t\t\tresponse: {\n\t\t\t\tclientDataJSON: bufferToBase64URLString(credential.response.clientDataJSON),\n\t\t\t\tauthenticatorData: bufferToBase64URLString(credential.response.authenticatorData),\n\t\t\t\tsignature: bufferToBase64URLString(credential.response.signature),\n\t\t\t\tuserHandle: credential.response.userHandle\n\t\t\t\t\t? bufferToBase64URLString(credential.response.userHandle)\n\t\t\t\t\t: undefined,\n\t\t\t},\n\t\t\tauthenticatorAttachment: undefined,\n\t\t\tclientExtensionResults: {\n\t\t\t\t...clientExtensionResults,\n\t\t\t\t...(largeBlob && {\n\t\t\t\t\tlargeBlob: {\n\t\t\t\t\t\t...largeBlob,\n\t\t\t\t\t\tblob: largeBlob?.blob ? bufferToBase64URLString(largeBlob.blob) : undefined,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t} satisfies AuthenticationExtensionsClientOutputsJSON,\n\t\t\ttype: \"public-key\",\n\t\t};\n\t},\n};\n\n/**\n *  warn the user about extensions that they tried to use that are not supported\n */\nconst warnUserOfMissingWebauthnExtensions = (\n\trequestedExtensions: AuthenticationExtensionsClientInputs | undefined,\n\tclientExtensionResults: AuthenticationExtensionsClientOutputs | undefined,\n) => {\n\tif (clientExtensionResults) {\n\t\tfor (const key in requestedExtensions) {\n\t\t\tconsole.log(key, clientExtensionResults[key]);\n\t\t\tif (typeof clientExtensionResults[key] === \"undefined\") {\n\t\t\t\talert(\n\t\t\t\t\t`Webauthn extension ${key} is undefined -- your browser probably doesn't know about it`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n};\n"]}