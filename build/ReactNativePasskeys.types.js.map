{"version":3,"file":"ReactNativePasskeys.types.js","sourceRoot":"","sources":["../src/ReactNativePasskeys.types.ts"],"names":[],"mappings":"","sourcesContent":["import type {\n\t// - for override\n\tAuthenticationExtensionsClientInputs as TypeScriptAuthenticationExtensionsClientInputs,\n\t// - for use & reexport\n\tBase64URLString,\n\tAuthenticatorTransportFuture,\n\tPublicKeyCredentialJSON,\n\tPublicKeyCredentialDescriptorJSON,\n\tPublicKeyCredentialUserEntityJSON,\n\tAuthenticatorAttestationResponseJSON,\n} from \"@simplewebauthn/typescript-types\";\n\nexport type {\n\tAttestationConveyancePreference,\n\tAuthenticationCredential,\n\tAuthenticatorAssertionResponse,\n\tAuthenticatorAttachment,\n\tAuthenticatorAttestationResponse,\n\tAuthenticatorSelectionCriteria,\n\tAuthenticatorTransport,\n\tCOSEAlgorithmIdentifier,\n\tCrypto,\n\tPublicKeyCredentialCreationOptions,\n\tPublicKeyCredentialDescriptor,\n\tPublicKeyCredentialParameters,\n\tPublicKeyCredentialRequestOptions,\n\tPublicKeyCredentialRpEntity,\n\tPublicKeyCredentialType,\n\tPublicKeyCredentialUserEntity,\n\tRegistrationCredential,\n\tUserVerificationRequirement,\n} from \"@simplewebauthn/typescript-types\";\n\nexport type {\n\tBase64URLString,\n\tPublicKeyCredentialJSON,\n\tAuthenticatorTransportFuture,\n\tPublicKeyCredentialDescriptorJSON,\n\tPublicKeyCredentialUserEntityJSON,\n\tAuthenticatorAttestationResponseJSON,\n};\n\n/**\n * A variant of PublicKeyCredentialCreationOptions suitable for JSON transmission\n *\n * This should eventually get replaced with official TypeScript DOM types when WebAuthn L3 types\n * eventually make it into the language:\n *\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-publickeycredentialcreationoptionsjson\n */\nexport interface PublicKeyCredentialCreationOptionsJSON {\n\trp: PublicKeyCredentialRpEntity;\n\tuser: PublicKeyCredentialUserEntityJSON;\n\tchallenge: Base64URLString;\n\tpubKeyCredParams: PublicKeyCredentialParameters[];\n\ttimeout?: number;\n\texcludeCredentials?: PublicKeyCredentialDescriptorJSON[];\n\tauthenticatorSelection?: AuthenticatorSelectionCriteria;\n\tattestation?: AttestationConveyancePreference;\n\textensions?: AuthenticationExtensionsClientInputs;\n}\n\n/**\n * A variant of PublicKeyCredentialRequestOptions suitable for JSON transmission\n */\nexport interface PublicKeyCredentialRequestOptionsJSON {\n\tchallenge: Base64URLString;\n\ttimeout?: number;\n\trpId?: string;\n\tallowCredentials?: PublicKeyCredentialDescriptorJSON[];\n\tuserVerification?: UserVerificationRequirement;\n\textensions?: AuthenticationExtensionsClientInputs;\n}\n\n/**\n * A slightly-modified RegistrationCredential to simplify working with ArrayBuffers that\n * are Base64URL-encoded so that they can be sent as JSON.\n *\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-registrationresponsejson\n */\nexport interface RegistrationResponseJSON {\n\tid: Base64URLString;\n\trawId: Base64URLString;\n\tresponse: AuthenticatorAttestationResponseJSON;\n\tauthenticatorAttachment?: AuthenticatorAttachment;\n\tclientExtensionResults: AuthenticationExtensionsClientOutputsJSON;\n\ttype: PublicKeyCredentialType;\n}\n\n/**\n * A slightly-modified AuthenticationCredential to simplify working with ArrayBuffers that\n * are Base64URL-encoded so that they can be sent as JSON.\n *\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-authenticationresponsejson\n */\nexport interface AuthenticationResponseJSON {\n\tid: Base64URLString;\n\trawId: Base64URLString;\n\tresponse: AuthenticatorAssertionResponseJSON;\n\tauthenticatorAttachment?: AuthenticatorAttachment;\n\tclientExtensionResults: AuthenticationExtensionsClientOutputsJSON;\n\ttype: PublicKeyCredentialType;\n}\n\n/**\n * A slightly-modified AuthenticatorAssertionResponse to simplify working with ArrayBuffers that\n * are Base64URL-encoded so that they can be sent as JSON.\n *\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-authenticatorassertionresponsejson\n */\nexport interface AuthenticatorAssertionResponseJSON {\n\tclientDataJSON: Base64URLString;\n\tauthenticatorData: Base64URLString;\n\tsignature: Base64URLString;\n\tuserHandle?: string;\n}\n\n/**\n * TypeScript's types are behind the latest extensions spec, so we define them here.\n * Should eventually be replaced by TypeScript's when TypeScript gets updated to\n * know about it (sometime after 5.3)\n *\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-authenticationextensionsclientinputs\n */\nexport interface AuthenticationExtensionsClientInputs\n\textends TypeScriptAuthenticationExtensionsClientInputs {\n\tlargeBlob?: AuthenticationExtensionsLargeBlobInputs;\n}\n\nexport type LargeBlobSupport = \"preferred\" | \"required\";\n\n/**\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-authenticationextensionslargeblobinputs\n */\nexport interface AuthenticationExtensionsLargeBlobInputs {\n\t// - Only valid during registration.\n\tsupport?: LargeBlobSupport;\n\n\t// - A boolean that indicates that the Relying Party would like to fetch the previously-written blob associated with the asserted credential. Only valid during authentication.\n\tread?: boolean;\n\n\t// - An opaque byte string that the Relying Party wishes to store with the existing credential. Only valid during authentication.\n\t// - We impose that the data is passed as base64-url encoding to make better align the passing of data from RN to native code\n\twrite?: Base64URLString;\n}\n\n// - largeBlob extension: https://w3c.github.io/webauthn/#sctn-large-blob-extension\nexport interface AuthenticationExtensionsClientOutputs {\n\tlargeBlob?: Omit<AuthenticationExtensionsLargeBlobOutputs, \"blob\"> & {\n\t\tblob?: ArrayBuffer;\n\t};\n}\n\n// - largeBlob extension: https://w3c.github.io/webauthn/#sctn-large-blob-extension\nexport interface AuthenticationExtensionsClientOutputsJSON {\n\tlargeBlob?: AuthenticationExtensionsLargeBlobOutputs;\n}\n\n/**\n * - Specification reference: https://w3c.github.io/webauthn/#dictdef-authenticationextensionslargebloboutputs\n */\nexport interface AuthenticationExtensionsLargeBlobOutputs {\n\t// - true if, and only if, the created credential supports storing large blobs. Only present in registration outputs.\n\tsupported?: boolean;\n\n\t// - The opaque byte string that was associated with the credential identified by rawId. Only valid if read was true.\n\tblob?: Base64URLString;\n\n\t// - A boolean that indicates that the contents of write were successfully stored on the authenticator, associated with the specified credential.\n\twritten?: boolean;\n}\n\n/**\n * A library specific type that combines the JSON results of a registration operation with a method\n * to get the public key of the new credential since these are not available directly from the native side\n */\nexport interface CreationReponse extends Omit<RegistrationResponseJSON, \"response\"> {\n\tresponse: RegistrationResponseJSON[\"response\"] & {\n\t\t/**\n\t\t * This operation returns an ArrayBuffer containing the DER SubjectPublicKeyInfo of the new credential, or null if this is not available.\n\t\t * https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-getpublickey\n\t\t */\n\t\tgetPublicKey(): Uint8Array | null;\n\t};\n}\n"]}