{"version":3,"file":"base64.js","sourceRoot":"","sources":["../../src/utils/base64.ts"],"names":[],"mappings":"AAAA,kKAAkK;AAClK;;;;;;GAMG;AACH,MAAM,UAAU,uBAAuB,CAAC,eAAuB;IAC9D,mCAAmC;IACnC,MAAM,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAA;IACpE;;;;;;OAMG;IACH,MAAM,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;IAC/C,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,SAAS,EAAE,GAAG,CAAC,CAAA;IAE5D,6BAA6B;IAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAA;IAE3B,kCAAkC;IAClC,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;IAC7C,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAA;IAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;IAChC,CAAC;IAED,OAAO,MAAM,CAAA;AACd,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,uBAAuB,CAAC,MAAmB;IAC1D,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAA;IACpC,IAAI,GAAG,GAAG,EAAE,CAAA;IAEZ,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE,CAAC;QAC9B,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;IACrC,CAAC;IAED,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA;IAE9B,OAAO,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;AAC9E,CAAC","sourcesContent":["// ! taken from https://github.com/MasterKale/SimpleWebAuthn/blob/e02dce6f2f83d8923f3a549f84e0b7b3d44fa3da/packages/browser/src/helpers/base64URLStringToBuffer.ts\n/**\n * Convert from a Base64URL-encoded string to an Array Buffer. Best used when converting a\n * credential ID from a JSON string to an ArrayBuffer, like in allowCredentials or\n * excludeCredentials\n *\n * Helper method to compliment `bufferToBase64URLString`\n */\nexport function base64URLStringToBuffer(base64URLString: string): ArrayBuffer {\n\t// Convert from Base64URL to Base64\n\tconst base64 = base64URLString.replace(/-/g, '+').replace(/_/g, '/')\n\t/**\n\t * Pad with '=' until it's a multiple of four\n\t * (4 - (85 % 4 = 1) = 3) % 4 = 3 padding\n\t * (4 - (86 % 4 = 2) = 2) % 4 = 2 padding\n\t * (4 - (87 % 4 = 3) = 1) % 4 = 1 padding\n\t * (4 - (88 % 4 = 0) = 4) % 4 = 0 padding\n\t */\n\tconst padLength = (4 - (base64.length % 4)) % 4\n\tconst padded = base64.padEnd(base64.length + padLength, '=')\n\n\t// Convert to a binary string\n\tconst binary = atob(padded)\n\n\t// Convert binary string to buffer\n\tconst buffer = new ArrayBuffer(binary.length)\n\tconst bytes = new Uint8Array(buffer)\n\n\tfor (let i = 0; i < binary.length; i++) {\n\t\tbytes[i] = binary.charCodeAt(i)\n\t}\n\n\treturn buffer\n}\n\n/**\n * Convert the given array buffer into a Base64URL-encoded string. Ideal for converting various\n * credential response ArrayBuffers to string for sending back to the server as JSON.\n *\n * Helper method to compliment `base64URLStringToBuffer`\n */\nexport function bufferToBase64URLString(buffer: ArrayBuffer): string {\n\tconst bytes = new Uint8Array(buffer)\n\tlet str = ''\n\n\tfor (const charCode of bytes) {\n\t\tstr += String.fromCharCode(charCode)\n\t}\n\n\tconst base64String = btoa(str)\n\n\treturn base64String.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n}\n"]}